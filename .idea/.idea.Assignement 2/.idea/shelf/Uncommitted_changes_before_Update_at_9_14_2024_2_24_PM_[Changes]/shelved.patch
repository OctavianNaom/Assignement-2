Index: InMemoryRepositories/SubForumMemoryRepository.cs
===================================================================
diff --git a/InMemoryRepositories/SubForumMemoryRepository.cs b/InMemoryRepositories/SubForumMemoryRepository.cs
deleted file mode 100644
--- a/InMemoryRepositories/SubForumMemoryRepository.cs	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ /dev/null	(revision e1571b4d7a0584be39766816dec56228ee714744)
@@ -1,79 +0,0 @@
-using Entities;
-using RepositoryContracts;
-
-namespace InMemoryRepositories;
-
-public class SubForumMemoryRepository : ISubForumRepository
-{
-    private static List<SubForum> subForums = new List<SubForum>();
-
-    public Task<SubForum> AddAsync(SubForum subForum)
-    {
-        subForum.SubForumId = subForums.Any() ? subForums.Max(x => x.SubForumId) : subForums.Max(x => x.SubForumId);
-        subForums.Add(subForum);
-        return Task.FromResult(subForum);
-    }
-
-    public Task UpdateAsync(SubForum subForum)
-    {
-        SubForum? existingSubForum = subForums.FirstOrDefault(x => x.SubForumId == subForum.SubForumId);
-        if (existingSubForum is null)
-        {
-            throw new NullReferenceException($"SubForum {subForum.SubForumId} not found");
-        }
-
-        subForums.Remove(existingSubForum);
-        subForums.Add(subForum);
-        return Task.CompletedTask;
-    }
-
-    public Task DeleteAsync(int id)
-    {
-        SubForum? subForumToRemove=subForums.SingleOrDefault();
-        if (subForumToRemove is null)
-        {
-            throw new InvalidOperationException($"SubForum {id} not found");
-        }
-        subForums.Remove(subForumToRemove);
-        return Task.CompletedTask;
-    }
-
-    public Task<SubForum> GetSingleAsync(int id,SubForum subForum)
-    {
-        return Task.FromResult(subForum);
-    }
-
-    public IQueryable<SubForum> GetManyAsync()
-    {
-        return subForums.AsQueryable();
-    }
-
-
-
-
-
-    public Task<SubForum> AddSubForum(SubForum subForum)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task UpdateSubForum(SubForum subForum)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task DeleteSubForum(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task<SubForum> GetSubForum(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public ISubForumRepository GetMany()
-    {
-        throw new NotImplementedException();
-    }
-}
\ No newline at end of file
Index: InMemoryRepositories/UserMemoryRepository.cs
===================================================================
diff --git a/InMemoryRepositories/UserMemoryRepository.cs b/InMemoryRepositories/UserMemoryRepository.cs
deleted file mode 100644
--- a/InMemoryRepositories/UserMemoryRepository.cs	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ /dev/null	(revision e1571b4d7a0584be39766816dec56228ee714744)
@@ -1,78 +0,0 @@
-using System.Reflection.Metadata;
-using Entities;
-using RepositoryContracts;
-namespace InMemoryRepositories;
-
-public class UserMemoryRepository : IUserRepository
-{
-    private static List<User> users = new List<User>();
-
-    public Task<User> AddAsynce(User user)
-    {
-        user.UserId = users.Any()
-            ? users.Max(x => x.UserId) + 1
-            : 1;
-        users.Add(user);
-        return Task.FromResult(user);
-
-    }
-
-    public Task UpdateAsync(User user)
-    {
-        User? existingUser = users.SingleOrDefault(x => x.UserId == user.UserId);
-        if (existingUser is null)
-        {
-            throw new InvalidOperationException($"User with id {user.UserId} not found");
-        }
-
-        users.Remove(existingUser);
-        users.Add(user);
-        return Task.CompletedTask;
-    }
-
-    public Task DeleteAsync(int id)
-    {
-        User? userToRemove = users.SingleOrDefault(x => x.UserId == id);
-        if (userToRemove is null)
-        {
-            throw new InvalidOperationException($"User with id {id} not found");
-        }
-        users.Remove(userToRemove);
-        return Task.CompletedTask;
-    }
-
-    public Task<User> GetSingleAsync(int id, User user)
-    {
-        return Task.FromResult(user);
-    }
-
-    public IQueryable<User> GetManyAsync()
-    {
-        return users.AsQueryable();
-    }
-    
-    public Task<User> AddUser(User user)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task UpdateUser(User user)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task DeleteUser(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task<User> GetUserById(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public IUserRepository GetMany()
-    {
-        throw new NotImplementedException();
-    }
-}
\ No newline at end of file
Index: InMemoryRepositories/PostMemoryRepository.cs
===================================================================
diff --git a/InMemoryRepositories/PostMemoryRepository.cs b/InMemoryRepositories/PostMemoryRepository.cs
deleted file mode 100644
--- a/InMemoryRepositories/PostMemoryRepository.cs	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ /dev/null	(revision e1571b4d7a0584be39766816dec56228ee714744)
@@ -1,73 +0,0 @@
-namespace InMemoryRepositories;
-using Entities;
-using RepositoryContracts;
-
-public class PostMemoryRepository: IPostRepository
-{
-    private static List<Post> posts = new List<Post>();
-
-    public Task<Post> AddAsync(Post post)
-    {
-        post.PostId=posts.Any()?posts.Max(x => x.PostId)+1: 1;
-        posts.Add(post);
-        return Task.FromResult(post);
-    }
-
-    public Task UpdateAsync(Post post)
-    {
-        Post?existingPost = posts.FirstOrDefault(x => x.PostId == post.PostId);
-        if (existingPost is null)
-        {
-            throw new InvalidOperationException($"Post {post.PostId} not found");
-        }
-        posts.Remove(existingPost);
-        posts.Add(post);
-        return Task.CompletedTask;
-    }
-
-    public Task DeleteAsync(int id)
-    {
-        Post? post = posts.SingleOrDefault(x => x.PostId == id);
-        if (post is null)
-        {
-            throw new InvalidOperationException($"Post {id} not found");
-        }
-
-        posts.Remove(post);
-        return Task.CompletedTask;
-    }
-
-    public Task GetsignlesAsync(int id)
-    {
-        return Task.FromResult(posts.Where(x => x.PostId == id));
-    }
-
-    public IQueryable<Post> GetManyAsync()
-    {
-        return posts.AsQueryable();
-    }
-    public Task<Post> AddPost(Post post)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task UpdatePost(Post post)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task DeletePost(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task<Post> GetPostById(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public IPostRepository GetMany()
-    {
-        throw new NotImplementedException();
-    }
-}
\ No newline at end of file
Index: InMemoryRepositories/VoteMemoryRepository.cs
===================================================================
diff --git a/InMemoryRepositories/VoteMemoryRepository.cs b/InMemoryRepositories/VoteMemoryRepository.cs
deleted file mode 100644
--- a/InMemoryRepositories/VoteMemoryRepository.cs	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ /dev/null	(revision e1571b4d7a0584be39766816dec56228ee714744)
@@ -1,75 +0,0 @@
-using Entities;
-using RepositoryContracts;
-
-namespace InMemoryRepositories;
-
-public class VoteMemoryRepository: IVoteRepository
-{
-    private static List<Vote> votes = new List<Vote>();
-
-    public Task<Vote> AddAsync(Vote vote)
-    {
-        vote.VoteId = votes.Any()? votes.Max(v => v.VoteId) + 1 : 1;
-        votes.Add(vote);
-        return Task.FromResult(vote);
-    }
-
-    public Task UpdateAsync(Vote vote)
-    {
-        Vote? existingVote = votes.SingleOrDefault(v => v.VoteId == vote.VoteId);
-        if (existingVote is null)
-        {
-            throw new InvalidOperationException($"vote with id {vote.VoteId} not found");
-        }
-        votes.Remove(existingVote);
-        votes.Add(vote);
-        return Task.CompletedTask;
-    }
-
-    public Task DeleteAsync(int id)
-    {
-        Vote?voteToRemove = votes.SingleOrDefault(v => v.VoteId == id);
-        if (voteToRemove is null)
-        {
-            throw new InvalidOperationException($"vote with id {id} not found");
-        }
-        votes.Remove(voteToRemove);
-        return Task.CompletedTask;
-    }
-
-    public Task<Vote> GetSingleAsync(int id)
-    {
-        return Task.FromResult(votes.SingleOrDefault(v => v.VoteId == id));
-    }
-
-    public IQueryable<Vote> GetManyAsync()
-    {
-        return votes.AsQueryable();
-    }
-    
-    
-    public Task<Vote> AddVote(Vote vote)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task UpdateVote(Vote vote)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task DeleteVote(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public Task<Vote> GetVote(int id)
-    {
-        throw new NotImplementedException();
-    }
-
-    public IQueryable<Vote> GetMany()
-    {
-        throw new NotImplementedException();
-    }
-}
\ No newline at end of file
Index: Assignement 2.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Server\", \"Server\", \"{D5BF2039-4100-4863-84DD-2CA237D51549}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Entities\", \"Entities\\Entities.csproj\", \"{5D9A172F-FC64-4446-BB27-070298E37F9A}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"InMemoryRepositories\", \"InMemoryRepositories\\InMemoryRepositories.csproj\", \"{41658189-EAFD-4640-950B-5E6F57A456A0}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"RepositoryContracts\", \"RepositoryContracts\\RepositoryContracts.csproj\", \"{B8048BCE-3027-437C-865D-C20D32C46069}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{41658189-EAFD-4640-950B-5E6F57A456A0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{41658189-EAFD-4640-950B-5E6F57A456A0}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{41658189-EAFD-4640-950B-5E6F57A456A0}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{41658189-EAFD-4640-950B-5E6F57A456A0}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{B8048BCE-3027-437C-865D-C20D32C46069}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B8048BCE-3027-437C-865D-C20D32C46069}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B8048BCE-3027-437C-865D-C20D32C46069}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B8048BCE-3027-437C-865D-C20D32C46069}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A} = {D5BF2039-4100-4863-84DD-2CA237D51549}\r\n\t\t{41658189-EAFD-4640-950B-5E6F57A456A0} = {D5BF2039-4100-4863-84DD-2CA237D51549}\r\n\t\t{B8048BCE-3027-437C-865D-C20D32C46069} = {D5BF2039-4100-4863-84DD-2CA237D51549}\r\n\tEndGlobalSection\r\nEndGlobal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assignement 2.sln b/Assignement 2.sln
--- a/Assignement 2.sln	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ b/Assignement 2.sln	(date 1726316601461)
@@ -6,8 +6,6 @@
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InMemoryRepositories", "InMemoryRepositories\InMemoryRepositories.csproj", "{41658189-EAFD-4640-950B-5E6F57A456A0}"
 EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "RepositoryContracts", "RepositoryContracts\RepositoryContracts.csproj", "{B8048BCE-3027-437C-865D-C20D32C46069}"
-EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -22,14 +20,9 @@
 		{41658189-EAFD-4640-950B-5E6F57A456A0}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{41658189-EAFD-4640-950B-5E6F57A456A0}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{41658189-EAFD-4640-950B-5E6F57A456A0}.Release|Any CPU.Build.0 = Release|Any CPU
-		{B8048BCE-3027-437C-865D-C20D32C46069}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{B8048BCE-3027-437C-865D-C20D32C46069}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{B8048BCE-3027-437C-865D-C20D32C46069}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{B8048BCE-3027-437C-865D-C20D32C46069}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(NestedProjects) = preSolution
 		{5D9A172F-FC64-4446-BB27-070298E37F9A} = {D5BF2039-4100-4863-84DD-2CA237D51549}
 		{41658189-EAFD-4640-950B-5E6F57A456A0} = {D5BF2039-4100-4863-84DD-2CA237D51549}
-		{B8048BCE-3027-437C-865D-C20D32C46069} = {D5BF2039-4100-4863-84DD-2CA237D51549}
 	EndGlobalSection
 EndGlobal
Index: Entities/Entities.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net8.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <Nullable>enable</Nullable>\r\n        <RootNamespace>Enteties</RootNamespace>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"..\\InMemoryRepositories\\InMemoryRepositories.csproj\" />\r\n      <ProjectReference Include=\"..\\RepositoryContracts\\RepositoryContracts.csproj\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Entities/Entities.csproj b/Entities/Entities.csproj
--- a/Entities/Entities.csproj	(revision e1571b4d7a0584be39766816dec56228ee714744)
+++ b/Entities/Entities.csproj	(date 1726316601469)
@@ -9,7 +9,6 @@
 
     <ItemGroup>
       <ProjectReference Include="..\InMemoryRepositories\InMemoryRepositories.csproj" />
-      <ProjectReference Include="..\RepositoryContracts\RepositoryContracts.csproj" />
     </ItemGroup>
 
 </Project>
