Index: InMemoryRepositories/VoteMemoryRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/VoteMemoryRepository.cs b/InMemoryRepositories/VoteMemoryRepository.cs
new file mode 100644
--- /dev/null	(date 1726324158917)
+++ b/InMemoryRepositories/VoteMemoryRepository.cs	(date 1726324158917)
@@ -0,0 +1,75 @@
+using Entities;
+using RepositoryContracts;
+
+namespace InMemoryRepositories;
+
+public class VoteMemoryRepository: IVoteRepository
+{
+    private static List<Vote> votes = new List<Vote>();
+
+    public Task<Vote> AddAsync(Vote vote)
+    {
+        vote.VoteId = votes.Any()? votes.Max(v => v.VoteId) + 1 : 1;
+        votes.Add(vote);
+        return Task.FromResult(vote);
+    }
+
+    public Task UpdateAsync(Vote vote)
+    {
+        Vote? existingVote = votes.SingleOrDefault(v => v.VoteId == vote.VoteId);
+        if (existingVote is null)
+        {
+            throw new InvalidOperationException($"vote with id {vote.VoteId} not found");
+        }
+        votes.Remove(existingVote);
+        votes.Add(vote);
+        return Task.CompletedTask;
+    }
+
+    public Task DeleteAsync(int id)
+    {
+        Vote?voteToRemove = votes.SingleOrDefault(v => v.VoteId == id);
+        if (voteToRemove is null)
+        {
+            throw new InvalidOperationException($"vote with id {id} not found");
+        }
+        votes.Remove(voteToRemove);
+        return Task.CompletedTask;
+    }
+
+    public Task<Vote> GetSingleAsync(int id)
+    {
+        return Task.FromResult(votes.SingleOrDefault(v => v.VoteId == id));
+    }
+
+    public IQueryable<Vote> GetManyAsync()
+    {
+        return votes.AsQueryable();
+    }
+    
+    
+    public Task<Vote> AddVote(Vote vote)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task UpdateVote(Vote vote)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task DeleteVote(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task<Vote> GetVote(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public IQueryable<Vote> GetMany()
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: InMemoryRepositories/CommentMemoryRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/CommentMemoryRepository.cs b/InMemoryRepositories/CommentMemoryRepository.cs
new file mode 100644
--- /dev/null	(date 1726323989791)
+++ b/InMemoryRepositories/CommentMemoryRepository.cs	(date 1726323989791)
@@ -0,0 +1,78 @@
+using Entities;
+using RepositoryContracts;
+
+namespace InMemoryRepositories;
+
+public class CommentMemoryRepository : ICommentRepository
+{
+    private static List<Comment> comments = new List<Comment>();
+
+    public Task<Comment> AddAsync(Comment comment)
+    {
+        comment.CommentId = comments.Any() ? comments.Max(x => x.CommentId) + 1 : 1;
+        comments.Add(comment);
+        return Task.FromResult(comment);
+    }
+
+    public Task UpdateAsync(Comment comment)
+    {
+        Comment? existingComment = comments.FirstOrDefault(x => x.CommentId == comment.CommentId);
+        if (existingComment != null)
+        {
+            throw new InvalidOperationException($"Cannot update a comment with id {comment.CommentId}");
+        }
+
+        comments.Add(comment);
+        comments.Remove(existingComment);
+        return Task.CompletedTask;
+    }
+
+    public Task DeleteAsync(int id)
+    {
+        Comment? commentToRemove = comments.SingleOrDefault(x => x.CommentId == id);
+        if (commentToRemove is null)
+        {
+            throw new InvalidOperationException($"No comment with id {id} was found.");
+        }
+
+        comments.Remove(commentToRemove);
+        return Task.CompletedTask;
+
+    }
+
+    public Task<Comment> GetSingleAsync(int id)
+    {return Task.FromResult(comments.SingleOrDefault(x => x.CommentId == id));
+        
+    }
+
+    public IQueryable<Comment> GetManyAsync()
+    {
+        return comments.AsQueryable();
+    }
+    
+
+    public Task<Comment> AddComment(Comment comment)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task UpdateComment(Comment comment)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task DeleteComment(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task<Comment> GetCommentById(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public ICommentRepository GetMany()
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: RepositoryContracts/ICommentRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RepositoryContracts/ICommentRepository.cs b/RepositoryContracts/ICommentRepository.cs
new file mode 100644
--- /dev/null	(date 1726323691286)
+++ b/RepositoryContracts/ICommentRepository.cs	(date 1726323691286)
@@ -0,0 +1,11 @@
+using Entities;
+
+namespace RepositoryContracts;
+
+public interface ICommentRepository
+{Task<Comment> AddComment(Comment comment);
+    Task UpdateComment(Comment comment);
+    Task DeleteComment(int id);
+    Task<Comment> GetCommentById(int id);
+    ICommentRepository GetMany();
+}
\ No newline at end of file
Index: RepositoryContracts/IPostRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RepositoryContracts/IPostRepository.cs b/RepositoryContracts/IPostRepository.cs
new file mode 100644
--- /dev/null	(date 1726323749692)
+++ b/RepositoryContracts/IPostRepository.cs	(date 1726323749692)
@@ -0,0 +1,11 @@
+using Entities;
+
+namespace RepositoryContracts;
+
+public interface IPostRepository
+{Task <Post> AddPost(Post post);
+    Task UpdatePost(Post post);
+    Task DeletePost(int id );
+    Task<Post> GetPostById(int id);
+    IPostRepository GetMany();
+}
\ No newline at end of file
Index: RepositoryContracts/ISubForumRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RepositoryContracts/ISubForumRepository.cs b/RepositoryContracts/ISubForumRepository.cs
new file mode 100644
--- /dev/null	(date 1726323749683)
+++ b/RepositoryContracts/ISubForumRepository.cs	(date 1726323749683)
@@ -0,0 +1,12 @@
+using Entities;
+
+namespace RepositoryContracts;
+
+public interface ISubForumRepository
+{Task <SubForum> AddSubForum(SubForum subForum);
+    Task UpdateSubForum(SubForum subForum);
+    Task DeleteSubForum(int id);
+    Task<SubForum> GetSubForum(int id);
+    ISubForumRepository GetMany();
+
+}
\ No newline at end of file
Index: RepositoryContracts/IUserRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RepositoryContracts/IUserRepository.cs b/RepositoryContracts/IUserRepository.cs
new file mode 100644
--- /dev/null	(date 1726323779691)
+++ b/RepositoryContracts/IUserRepository.cs	(date 1726323779691)
@@ -0,0 +1,13 @@
+using Entities;
+
+namespace RepositoryContracts;
+
+public interface IUserRepository
+{
+    Task<User> AddUser(User user);
+    Task UpdateUser(User user);
+    Task DeleteUser(int id);
+    Task<User> GetUserById(int id);
+    IUserRepository GetMany();
+
+}
\ No newline at end of file
Index: RepositoryContracts/IVoteRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RepositoryContracts/IVoteRepository.cs b/RepositoryContracts/IVoteRepository.cs
new file mode 100644
--- /dev/null	(date 1726323805236)
+++ b/RepositoryContracts/IVoteRepository.cs	(date 1726323805236)
@@ -0,0 +1,12 @@
+using Entities;
+
+namespace RepositoryContracts;
+
+public interface IVoteRepository
+{
+    Task<Vote> AddVote(Vote vote);
+    Task UpdateVote(Vote vote);
+    Task DeleteVote(int id);
+    Task<Vote> GetVote(int id);
+    IQueryable<Vote> GetMany();
+}
\ No newline at end of file
Index: Assignement 2.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Server\", \"Server\", \"{D5BF2039-4100-4863-84DD-2CA237D51549}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Entities\", \"Entities\\Entities.csproj\", \"{5D9A172F-FC64-4446-BB27-070298E37F9A}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{5D9A172F-FC64-4446-BB27-070298E37F9A} = {D5BF2039-4100-4863-84DD-2CA237D51549}\r\n\tEndGlobalSection\r\nEndGlobal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assignement 2.sln b/Assignement 2.sln
--- a/Assignement 2.sln	(revision 4f9ddbd2a55c32009cb901d045d72e18f7adc1d1)
+++ b/Assignement 2.sln	(date 1726323947204)
@@ -4,6 +4,10 @@
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Entities", "Entities\Entities.csproj", "{5D9A172F-FC64-4446-BB27-070298E37F9A}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "RepositoryContracts", "RepositoryContracts\RepositoryContracts.csproj", "{32F9B030-995F-470A-B4D3-BC0B9D381DA0}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "InMemoryRepositories", "InMemoryRepositories\InMemoryRepositories.csproj", "{525A1E23-D984-409B-BFD5-25C31064E53E}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -14,8 +18,18 @@
 		{5D9A172F-FC64-4446-BB27-070298E37F9A}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{5D9A172F-FC64-4446-BB27-070298E37F9A}.Release|Any CPU.Build.0 = Release|Any CPU
+		{32F9B030-995F-470A-B4D3-BC0B9D381DA0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{32F9B030-995F-470A-B4D3-BC0B9D381DA0}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{32F9B030-995F-470A-B4D3-BC0B9D381DA0}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{32F9B030-995F-470A-B4D3-BC0B9D381DA0}.Release|Any CPU.Build.0 = Release|Any CPU
+		{525A1E23-D984-409B-BFD5-25C31064E53E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{525A1E23-D984-409B-BFD5-25C31064E53E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{525A1E23-D984-409B-BFD5-25C31064E53E}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{525A1E23-D984-409B-BFD5-25C31064E53E}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(NestedProjects) = preSolution
 		{5D9A172F-FC64-4446-BB27-070298E37F9A} = {D5BF2039-4100-4863-84DD-2CA237D51549}
+		{32F9B030-995F-470A-B4D3-BC0B9D381DA0} = {D5BF2039-4100-4863-84DD-2CA237D51549}
+		{525A1E23-D984-409B-BFD5-25C31064E53E} = {D5BF2039-4100-4863-84DD-2CA237D51549}
 	EndGlobalSection
 EndGlobal
Index: InMemoryRepositories/InMemoryRepositories.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/InMemoryRepositories.csproj b/InMemoryRepositories/InMemoryRepositories.csproj
new file mode 100644
--- /dev/null	(date 1726323947475)
+++ b/InMemoryRepositories/InMemoryRepositories.csproj	(date 1726323947475)
@@ -0,0 +1,15 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+    <PropertyGroup>
+        <TargetFramework>net8.0</TargetFramework>
+        <ImplicitUsings>enable</ImplicitUsings>
+        <Nullable>enable</Nullable>
+        <RootNamespace>InMemoryRepository</RootNamespace>
+    </PropertyGroup>
+
+    <ItemGroup>
+      <ProjectReference Include="..\Entities\Entities.csproj" />
+      <ProjectReference Include="..\RepositoryContracts\RepositoryContracts.csproj" />
+    </ItemGroup>
+
+</Project>
Index: InMemoryRepositories/PostMemoryRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/PostMemoryRepository.cs b/InMemoryRepositories/PostMemoryRepository.cs
new file mode 100644
--- /dev/null	(date 1726324034281)
+++ b/InMemoryRepositories/PostMemoryRepository.cs	(date 1726324034281)
@@ -0,0 +1,73 @@
+namespace InMemoryRepositories;
+using Entities;
+using RepositoryContracts;
+
+public class PostMemoryRepository: IPostRepository
+{
+    private static List<Post> posts = new List<Post>();
+
+    public Task<Post> AddAsync(Post post)
+    {
+        post.PostId=posts.Any()?posts.Max(x => x.PostId)+1: 1;
+        posts.Add(post);
+        return Task.FromResult(post);
+    }
+
+    public Task UpdateAsync(Post post)
+    {
+        Post?existingPost = posts.FirstOrDefault(x => x.PostId == post.PostId);
+        if (existingPost is null)
+        {
+            throw new InvalidOperationException($"Post {post.PostId} not found");
+        }
+        posts.Remove(existingPost);
+        posts.Add(post);
+        return Task.CompletedTask;
+    }
+
+    public Task DeleteAsync(int id)
+    {
+        Post? post = posts.SingleOrDefault(x => x.PostId == id);
+        if (post is null)
+        {
+            throw new InvalidOperationException($"Post {id} not found");
+        }
+
+        posts.Remove(post);
+        return Task.CompletedTask;
+    }
+
+    public Task GetsignlesAsync(int id)
+    {
+        return Task.FromResult(posts.Where(x => x.PostId == id));
+    }
+
+    public IQueryable<Post> GetManyAsync()
+    {
+        return posts.AsQueryable();
+    }
+    public Task<Post> AddPost(Post post)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task UpdatePost(Post post)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task DeletePost(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task<Post> GetPostById(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public IPostRepository GetMany()
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: InMemoryRepositories/SubForumMemoryRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/SubForumMemoryRepository.cs b/InMemoryRepositories/SubForumMemoryRepository.cs
new file mode 100644
--- /dev/null	(date 1726324057884)
+++ b/InMemoryRepositories/SubForumMemoryRepository.cs	(date 1726324057884)
@@ -0,0 +1,79 @@
+using Entities;
+using RepositoryContracts;
+
+namespace InMemoryRepositories;
+
+public class SubForumMemoryRepository : ISubForumRepository
+{
+    private static List<SubForum> subForums = new List<SubForum>();
+
+    public Task<SubForum> AddAsync(SubForum subForum)
+    {
+        subForum.SubForumId = subForums.Any() ? subForums.Max(x => x.SubForumId) : subForums.Max(x => x.SubForumId);
+        subForums.Add(subForum);
+        return Task.FromResult(subForum);
+    }
+
+    public Task UpdateAsync(SubForum subForum)
+    {
+        SubForum? existingSubForum = subForums.FirstOrDefault(x => x.SubForumId == subForum.SubForumId);
+        if (existingSubForum is null)
+        {
+            throw new NullReferenceException($"SubForum {subForum.SubForumId} not found");
+        }
+
+        subForums.Remove(existingSubForum);
+        subForums.Add(subForum);
+        return Task.CompletedTask;
+    }
+
+    public Task DeleteAsync(int id)
+    {
+        SubForum? subForumToRemove=subForums.SingleOrDefault();
+        if (subForumToRemove is null)
+        {
+            throw new InvalidOperationException($"SubForum {id} not found");
+        }
+        subForums.Remove(subForumToRemove);
+        return Task.CompletedTask;
+    }
+
+    public Task<SubForum> GetSingleAsync(int id,SubForum subForum)
+    {
+        return Task.FromResult(subForum);
+    }
+
+    public IQueryable<SubForum> GetManyAsync()
+    {
+        return subForums.AsQueryable();
+    }
+
+
+
+
+
+    public Task<SubForum> AddSubForum(SubForum subForum)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task UpdateSubForum(SubForum subForum)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task DeleteSubForum(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task<SubForum> GetSubForum(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public ISubForumRepository GetMany()
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: InMemoryRepositories/UserMemoryRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/InMemoryRepositories/UserMemoryRepository.cs b/InMemoryRepositories/UserMemoryRepository.cs
new file mode 100644
--- /dev/null	(date 1726324078749)
+++ b/InMemoryRepositories/UserMemoryRepository.cs	(date 1726324078749)
@@ -0,0 +1,78 @@
+using System.Reflection.Metadata;
+using Entities;
+using RepositoryContracts;
+namespace InMemoryRepositories;
+
+public class UserMemoryRepository : IUserRepository
+{
+    private static List<User> users = new List<User>();
+
+    public Task<User> AddAsynce(User user)
+    {
+        user.UserId = users.Any()
+            ? users.Max(x => x.UserId) + 1
+            : 1;
+        users.Add(user);
+        return Task.FromResult(user);
+
+    }
+
+    public Task UpdateAsync(User user)
+    {
+        User? existingUser = users.SingleOrDefault(x => x.UserId == user.UserId);
+        if (existingUser is null)
+        {
+            throw new InvalidOperationException($"User with id {user.UserId} not found");
+        }
+
+        users.Remove(existingUser);
+        users.Add(user);
+        return Task.CompletedTask;
+    }
+
+    public Task DeleteAsync(int id)
+    {
+        User? userToRemove = users.SingleOrDefault(x => x.UserId == id);
+        if (userToRemove is null)
+        {
+            throw new InvalidOperationException($"User with id {id} not found");
+        }
+        users.Remove(userToRemove);
+        return Task.CompletedTask;
+    }
+
+    public Task<User> GetSingleAsync(int id, User user)
+    {
+        return Task.FromResult(user);
+    }
+
+    public IQueryable<User> GetManyAsync()
+    {
+        return users.AsQueryable();
+    }
+    
+    public Task<User> AddUser(User user)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task UpdateUser(User user)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task DeleteUser(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public Task<User> GetUserById(int id)
+    {
+        throw new NotImplementedException();
+    }
+
+    public IUserRepository GetMany()
+    {
+        throw new NotImplementedException();
+    }
+}
\ No newline at end of file
